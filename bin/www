#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs'), https = require('https')


var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');



var options = {
    key: fs.readFileSync('/etc/letsencrypt/live/2434.kr/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/2434.kr/fullchain.pem'),
};

port = "80"
port_secure = "443"

// Redirect from http port to https
http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(port, port_secure) + req.url });
    console.log("http request, will go to >> ");
    console.log("https://" + req.headers['host'].replace(port, port_secure) + req.url );
    res.end();
}).listen(port);

//var server = http.createServer(app);
var ssl_server = https.createServer(options, app)


//server.listen(port);
ssl_server.listen(port_secure);

//registerHandler(server);
registerHandler(ssl_server);

function registerHandler(server) {
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}
